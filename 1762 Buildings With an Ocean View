class Solution {
    public int[] findBuildings(int[] heights) {
        // if (heights.length == 0) return new int[0];
        // Stack<Integer> stack = new Stack<>();
        // int max = -1;
        // for (int i = heights.length - 1; i >= 0; i--) {
        //     if (heights[i] > max) {
        //         stack.push(i);
        //         max = heights[i];
        //     }
        // }
        // int[] ans = new int[stack.size()];
        // int i = 0;
        // while (!stack.isEmpty()) {
        //     ans[i++] = stack.pop();
        // }


        List<Integer> list = new ArrayList<>();
        int max = -1;
        // heights are > 0?
        for (int i = heights.length - 1; i >= 0; i--) {
            if (heights[i] > max) {
                list.add(i);
                max = heights[i];
            }
        }
        Collections.reverse(list);
        // int[] ans = list.stream().mapToInt(i -> i.intValue()).toArray();
        int[] ans = list.stream().mapToInt(Integer :: intValue).toArray();
        return ans;
    }
}