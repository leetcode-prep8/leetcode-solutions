class SparseVector {
    // Approach 1 – HS<Index> or HM<Index, Val> O(nonZero) | O(nonZero)
    // Approach 2 – Optimize mem w sorted int[][] or List<int[]>, two pointers

    List<int[]> pairs = new ArrayList<>(); // HashMap<Integer, Integer> map = new HashMap<>();

    SparseVector(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                pairs.add(new int[]{i, nums[i]}); // map.put(i, nums[i]);  // Approach 1
            }
        }
    }
    
    private int binarySearch(List<int[]> list, int target) {
        int s = 0, e = list.size() - 1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            int val = list.get(mid)[0];
            if (val == target) return mid;
            else if (val < target) {
                s = mid + 1;
            } else {
                e = mid - 1;
            }
        }
        return -1;
    } 

    public int dotProduct(SparseVector vec) {
        // int p1 = 0, p2 = 0;
        // int sum = 0;
        // while (p1 < this.pairs.size() && p2 < vec.pairs.size()) {
        //     int index1 = pairs.get(p1)[0], index2 = vec.pairs.get(p2)[0];
        //     if (index1 < index2) p1++;
        //     else if (index1 > index2) p2++;
        //     else {
        //         sum += pairs.get(p1++)[1] * vec.pairs.get(p2++)[1];
        //     }
        // }

        //one is sparse
        List<int[]> sparse = pairs;
        List<int[]> nonSparse = vec.pairs;
        int sum = 0;
        if (pairs.size() > vec.pairs.size())  {
            sparse = vec.pairs;
            nonSparse = pairs;
        }
        for (int[] arr : sparse) {
            int p2 = binarySearch(nonSparse, arr[0]); 
            if (p2 != -1) {
                sum += arr[1] * nonSparse.get(p2)[1];
            }
        }

        return sum;
    }
}