/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return empty list if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        return getSum(nestedList, 1);
        // Queue<List<NestedInteger>> queue = new LinkedList<List<NestedInteger>>();
        // int depth = 1;
        // int sum = 0;
        // queue.offer(nestedList);
        // while (!queue.isEmpty()) {
        //     int size = queue.size();
        //     for (int i = 0; i < size; i++) {
        //         List<NestedInteger> currL = queue.poll();
        //         int currSize = currL.size();
        //         for (int j = 0; j < currSize; j++) {
        //             if (currL.get(j).isInteger()) sum += depth * currL.get(j).getInteger();
        //             else {
        //                 queue.offer(currL.get(j).getList());
        //             }
        //         }
                
        //     }
        //     depth++;
        // }
        // return sum;
    }

    private int getSum(List<NestedInteger> list, int depth) {
        int sum = 0;
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).isInteger()) sum += depth * list.get(i).getInteger();
            else {
                sum += getSum(list.get(i).getList(), depth + 1);
            }
        }
        return sum;
    }
}
// BFS O(n) | O(max in height layer)
// DFS O(n) | O(max depth)